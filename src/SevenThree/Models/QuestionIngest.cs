// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SevenThree.Models;
//
//    var questionIngest = QuestionIngest.FromJson(jsonString);

namespace SevenThree.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class QuestionIngest
    {
        [JsonProperty("QuestionId")]
        public string QuestionId { get; set; }

        [JsonProperty("AnswerKey")]
        public AnswerKey AnswerKey { get; set; }

        [JsonProperty("FccPart")]
        public string FccPart { get; set; }

        [JsonProperty("Question")]
        public string Question { get; set; }

        [JsonProperty("SubelementName")]
        public SubelementName SubelementName { get; set; }

        [JsonProperty("SubelementDesc")]
        public string SubelementDesc { get; set; }

        [JsonProperty("PossibleAnswer")]
        public List<string> PossibleAnswer { get; set; }
    }

    public enum AnswerKey { A, B, C, D };

    public enum SubelementName { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 };

    public partial class QuestionIngest
    {
        public static List<QuestionIngest> FromJson(string json) => JsonConvert.DeserializeObject<List<QuestionIngest>>(json, SevenThree.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<QuestionIngest> self) => JsonConvert.SerializeObject(self, SevenThree.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AnswerKeyConverter.Singleton,
                SubelementNameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AnswerKeyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AnswerKey) || t == typeof(AnswerKey?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "A":
                    return AnswerKey.A;
                case "B":
                    return AnswerKey.B;
                case "C":
                    return AnswerKey.C;
                case "D":
                    return AnswerKey.D;
            }
            throw new Exception("Cannot unmarshal type AnswerKey");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AnswerKey)untypedValue;
            switch (value)
            {
                case AnswerKey.A:
                    serializer.Serialize(writer, "A");
                    return;
                case AnswerKey.B:
                    serializer.Serialize(writer, "B");
                    return;
                case AnswerKey.C:
                    serializer.Serialize(writer, "C");
                    return;
                case AnswerKey.D:
                    serializer.Serialize(writer, "D");
                    return;
            }
            throw new Exception("Cannot marshal type AnswerKey");
        }

        public static readonly AnswerKeyConverter Singleton = new AnswerKeyConverter();
    }

    internal class SubelementNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SubelementName) || t == typeof(SubelementName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "T0":
                    return SubelementName.T0;
                case "T1":
                    return SubelementName.T1;
                case "T2":
                    return SubelementName.T2;
                case "T3":
                    return SubelementName.T3;
                case "T4":
                    return SubelementName.T4;
                case "T5":
                    return SubelementName.T5;
                case "T6":
                    return SubelementName.T6;
                case "T7":
                    return SubelementName.T7;
                case "T8":
                    return SubelementName.T8;
                case "T9":
                    return SubelementName.T9;
            }
            throw new Exception("Cannot unmarshal type SubelementName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SubelementName)untypedValue;
            switch (value)
            {
                case SubelementName.T0:
                    serializer.Serialize(writer, "T0");
                    return;
                case SubelementName.T1:
                    serializer.Serialize(writer, "T1");
                    return;
                case SubelementName.T2:
                    serializer.Serialize(writer, "T2");
                    return;
                case SubelementName.T3:
                    serializer.Serialize(writer, "T3");
                    return;
                case SubelementName.T4:
                    serializer.Serialize(writer, "T4");
                    return;
                case SubelementName.T5:
                    serializer.Serialize(writer, "T5");
                    return;
                case SubelementName.T6:
                    serializer.Serialize(writer, "T6");
                    return;
                case SubelementName.T7:
                    serializer.Serialize(writer, "T7");
                    return;
                case SubelementName.T8:
                    serializer.Serialize(writer, "T8");
                    return;
                case SubelementName.T9:
                    serializer.Serialize(writer, "T9");
                    return;
            }
            throw new Exception("Cannot marshal type SubelementName");
        }

        public static readonly SubelementNameConverter Singleton = new SubelementNameConverter();
    }
}
